int src[20];

void merge(int l,int mid,int r) {
	int buf[20];
	int i = l, j = mid + 1, k = l;
	while (i <= r) {
		buf[i] = src[i];
		i = i + 1;
	}
	i = l;
	while (i <= mid || j <= r) {
		if (i > mid) {
			src[k] = buf[j];
			j = j + 1;
		}
		else if (j > r) {
			src[k] = buf[i];
			i = i + 1;
		}
		else if (buf[i] > buf[j]) {
			src[k] = buf[j];
			j = j + 1;
		}
		else {
			src[k] = buf[i];
			i = i + 1;
		}
		k = k + 1;
	}
}

void mergeSort(int l, int r) {
	if (l >= r) return;
	int mid = (l + r) / 2;
	mergeSort(l, mid);
	mergeSort(mid + 1, r);
	merge(l, mid, r);
}

int main() {
	int i = 0;
	while (i < 20) {
		src[i] = 20 - i;
		i = i + 1;
	}
	i = 0;
	while (i < 20) {
		printf("%d ", src[i]);
		i = i + 1;
	}
	printf("\n");
	mergeSort(0, 19);
	i = 0;
	while (i < 20) {
		printf("%d ", src[i]);
		i = i + 1;
	}
	printf("\n");
	return 0;
}