.data
	global:
	0 1 2 3 4 5 6 7 8 9 
	str_0: .asciiz "\n"
	str_1: .asciiz ", "


.text
		la $28, global
		addiu	 $29, $29, -44

# function_i32 @main():
		f_main:
	# basicBlock_0
		# 	%1 = call i32 @getint()
		addiu	 $2, $0, 5
		syscall
		xor		 $5, $2, $0
		# 	%2 = call i32 @getint()
		addiu	 $2, $0, 5
		syscall
		xor		 $6, $2, $0
		# 	%3 = call i32 @fib(i32 4)
		sw		 $5, 4($29)
		sw		 $6, 8($29)
		sw		 $31, 0($29)
		addiu	 $1, $0, 4
		sw		 $1, -44($29)
		addiu	 $29, $29, -48
		jal f_fib
		addiu	 $29, $29, 48
		lw		 $31, 0($29)
		xor		 $5, $2, $0
		# 	%4 = getelementptr [10 x i32], [10 x i32]* @a, i32 0, i32 1
		addiu	 $6, $28, 4
		# 	%5 = load i32, i32* %4
		lw		 $7, 0($6)
		la $4, str_0
		addiu	 $2, $0, 4
		syscall
		# 	%6 = mul i32 %1, %2
		lw		 $8, 4($29)
		lw		 $9, 8($29)
		mult	 $8, $9
		mflo	 $10
		# 	%7 = sub i32 0, %6
		sw		 $5, 12($29)
		addiu	 $1, $0, 0
		subu	 $5, $1, $10
		# 	%8 = mul i32 %7, %3
		sw		 $6, 16($29)
		lw		 $6, 12($29)
		sw		 $7, 20($29)
		mult	 $5, $6
		mflo	 $7
		# 	%9 = add i32 %8, %5
		lw		 $8, 20($29)
		addu	 $9, $7, $8
		# 	%10 = mul i32 %9, 5
		sw		 $10, 24($29)
		sll		 $3, $9, 2
		addu	 $10, $3, $9
		# 	call void @putint(i32 %10)
		xor		 $4, $10, $0
		addiu	 $2, $0, 1
		syscall
		la $4, str_1
		addiu	 $2, $0, 4
		syscall
		# 	call void @putint(i32 %2)
		lw		 $4, 8($29)
		addiu	 $2, $0, 1
		syscall
		la $4, str_1
		addiu	 $2, $0, 4
		syscall
		# 	call void @putint(i32 10)
		addiu	 $4, $0, 10
		addiu	 $2, $0, 1
		syscall
		la $4, str_0
		addiu	 $2, $0, 4
		syscall
		# 	ret i32 0
		addiu	 $2, $0, 10
		syscall

# function_i32 @fib(i32):
		f_fib:
	# basicBlock_1
		# 	%2 = zext i1 1 to i32
		addiu	 $5, $0, 1
		# 	%3 = icmp eq i32 %0, %2
		lw		 $6, 4($29)
		seq		 $7, $6, $5
		# 	%4 = icmp ne i1 %3, 0
		# 	br i1 %4, label %8, label %5
		addiu	 $1, $0, 0
		bne		 $7, $1, bb_fib_8
		j bb_fib_5
	# basicBlock_5
		bb_fib_5:
		# 	%6 = icmp eq i32 %0, 2
		lw		 $5, 4($29)
		addiu	 $1, $0, 2
		seq		 $6, $5, $1
		# 	%7 = icmp ne i1 %6, 0
		# 	br i1 %7, label %15, label %9
		addiu	 $1, $0, 0
		bne		 $6, $1, bb_fib_15
		j bb_fib_9
	# basicBlock_8
		bb_fib_8:
		# 	ret i32 1
		addiu	 $2, $0, 1
		jr $31
	# basicBlock_9
		bb_fib_9:
		# 	%10 = sub i32 %0, 1
		lw		 $5, 4($29)
		addiu	 $1, $0, 1
		subu	 $6, $5, $1
		# 	%11 = call i32 @fib(i32 %10)
		sw		 $6, 28($29)
		sw		 $31, 0($29)
		sw		 $6, -44($29)
		addiu	 $29, $29, -48
		jal f_fib
		addiu	 $29, $29, 48
		lw		 $31, 0($29)
		xor		 $5, $2, $0
		# 	%12 = sub i32 %0, 2
		lw		 $6, 4($29)
		addiu	 $1, $0, 2
		subu	 $7, $6, $1
		# 	%13 = call i32 @fib(i32 %12)
		sw		 $5, 32($29)
		sw		 $7, 36($29)
		sw		 $31, 0($29)
		sw		 $7, -44($29)
		addiu	 $29, $29, -48
		jal f_fib
		addiu	 $29, $29, 48
		lw		 $31, 0($29)
		xor		 $5, $2, $0
		# 	%14 = add i32 %11, %13
		lw		 $6, 32($29)
		addu	 $7, $6, $5
		# 	ret i32 %14
		xor		 $2, $7, $0
		jr $31
	# basicBlock_15
		bb_fib_15:
		# 	ret i32 2
		addiu	 $2, $0, 2
		jr $31
