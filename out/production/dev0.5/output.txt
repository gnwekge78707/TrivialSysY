INTTK int
<FuncType>
IDENFR foo
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
INTCON 72
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ;
<Stmt>
RBRACE }
<Block>
<FuncDef>
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR a
ASSIGN =
INTCON 3
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<InitVal>
<VarDef>
COMMA ,
IDENFR b
ASSIGN =
INTCON 7
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<InitVal>
<VarDef>
COMMA ,
IDENFR c
ASSIGN =
INTCON 5
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<InitVal>
<VarDef>
COMMA ,
IDENFR d
ASSIGN =
INTCON 6
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<InitVal>
<VarDef>
COMMA ,
IDENFR e
ASSIGN =
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<InitVal>
<VarDef>
COMMA ,
IDENFR f
ASSIGN =
INTCON 0
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<InitVal>
<VarDef>
COMMA ,
IDENFR g
ASSIGN =
INTCON 3
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<InitVal>
<VarDef>
COMMA ,
IDENFR h
ASSIGN =
INTCON 5
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<InitVal>
<VarDef>
COMMA ,
IDENFR i
ASSIGN =
INTCON 4
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<InitVal>
<VarDef>
COMMA ,
IDENFR j
ASSIGN =
INTCON 2
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<InitVal>
<VarDef>
COMMA ,
IDENFR k
ASSIGN =
INTCON 7
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<InitVal>
<VarDef>
COMMA ,
IDENFR l
ASSIGN =
INTCON 9
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<InitVal>
<VarDef>
COMMA ,
IDENFR m
ASSIGN =
INTCON 8
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<InitVal>
<VarDef>
COMMA ,
IDENFR n
ASSIGN =
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<InitVal>
<VarDef>
COMMA ,
IDENFR o
ASSIGN =
INTCON 4
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<InitVal>
<VarDef>
COMMA ,
IDENFR p
ASSIGN =
INTCON 6
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<InitVal>
<VarDef>
SEMICN ;
<VarDecl>
INTTK int
IDENFR sum1
ASSIGN =
IDENFR a
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
PLUS +
IDENFR b
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
PLUS +
IDENFR c
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
PLUS +
IDENFR d
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
PLUS +
IDENFR e
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
PLUS +
IDENFR f
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
PLUS +
IDENFR g
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
PLUS +
IDENFR h
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<InitVal>
<VarDef>
SEMICN ;
<VarDecl>
INTTK int
IDENFR sum2
ASSIGN =
IDENFR i
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
PLUS +
IDENFR j
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
PLUS +
IDENFR k
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
PLUS +
IDENFR l
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
PLUS +
IDENFR m
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
PLUS +
IDENFR n
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
PLUS +
IDENFR o
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
PLUS +
IDENFR p
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<InitVal>
<VarDef>
SEMICN ;
<VarDecl>
IDENFR sum1
<LVal>
ASSIGN =
IDENFR sum1
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
PLUS +
IDENFR foo
LPARENT (
RPARENT )
<UnaryExp>
<MulExp>
<AddExp>
PLUS +
IDENFR foo
LPARENT (
RPARENT )
<UnaryExp>
<MulExp>
<AddExp>
PLUS +
IDENFR foo
LPARENT (
RPARENT )
<UnaryExp>
<MulExp>
<AddExp>
PLUS +
IDENFR foo
LPARENT (
RPARENT )
<UnaryExp>
<MulExp>
<AddExp>
PLUS +
IDENFR foo
LPARENT (
RPARENT )
<UnaryExp>
<MulExp>
<AddExp>
PLUS +
IDENFR foo
LPARENT (
RPARENT )
<UnaryExp>
<MulExp>
<AddExp>
PLUS +
IDENFR foo
LPARENT (
RPARENT )
<UnaryExp>
<MulExp>
<AddExp>
PLUS +
IDENFR foo
LPARENT (
RPARENT )
<UnaryExp>
<MulExp>
<AddExp>
PLUS +
IDENFR foo
LPARENT (
RPARENT )
<UnaryExp>
<MulExp>
<AddExp>
PLUS +
IDENFR foo
LPARENT (
RPARENT )
<UnaryExp>
<MulExp>
<AddExp>
PLUS +
IDENFR foo
LPARENT (
RPARENT )
<UnaryExp>
<MulExp>
<AddExp>
PLUS +
IDENFR foo
LPARENT (
RPARENT )
<UnaryExp>
<MulExp>
<AddExp>
PLUS +
IDENFR foo
LPARENT (
RPARENT )
<UnaryExp>
<MulExp>
<AddExp>
PLUS +
IDENFR foo
LPARENT (
RPARENT )
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ;
<Stmt>
INTTK int
IDENFR q
ASSIGN =
INTCON 4
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<InitVal>
<VarDef>
COMMA ,
IDENFR r
ASSIGN =
INTCON 7
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<InitVal>
<VarDef>
COMMA ,
IDENFR s
ASSIGN =
INTCON 2
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<InitVal>
<VarDef>
COMMA ,
IDENFR t
ASSIGN =
INTCON 5
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<InitVal>
<VarDef>
COMMA ,
IDENFR u
ASSIGN =
INTCON 8
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<InitVal>
<VarDef>
COMMA ,
IDENFR v
ASSIGN =
INTCON 0
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<InitVal>
<VarDef>
COMMA ,
IDENFR w
ASSIGN =
INTCON 6
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<InitVal>
<VarDef>
COMMA ,
IDENFR x
ASSIGN =
INTCON 3
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<InitVal>
<VarDef>
SEMICN ;
<VarDecl>
IDENFR a
<LVal>
ASSIGN =
IDENFR i
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ;
<Stmt>
IDENFR b
<LVal>
ASSIGN =
IDENFR j
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ;
<Stmt>
IDENFR c
<LVal>
ASSIGN =
IDENFR k
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ;
<Stmt>
IDENFR d
<LVal>
ASSIGN =
IDENFR l
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ;
<Stmt>
IDENFR e
<LVal>
ASSIGN =
IDENFR m
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ;
<Stmt>
IDENFR f
<LVal>
ASSIGN =
IDENFR n
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ;
<Stmt>
IDENFR g
<LVal>
ASSIGN =
IDENFR o
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ;
<Stmt>
IDENFR h
<LVal>
ASSIGN =
IDENFR p
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ;
<Stmt>
INTTK int
IDENFR sum3
ASSIGN =
IDENFR q
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
PLUS +
IDENFR r
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
PLUS +
IDENFR s
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
PLUS +
IDENFR t
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
PLUS +
IDENFR u
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
PLUS +
IDENFR v
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
PLUS +
IDENFR w
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
PLUS +
IDENFR x
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<InitVal>
<VarDef>
SEMICN ;
<VarDecl>
INTTK int
IDENFR sum
ASSIGN =
IDENFR sum1
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
PLUS +
IDENFR sum2
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
PLUS +
IDENFR sum3
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<InitVal>
<VarDef>
SEMICN ;
<VarDecl>
PRINTFTK printf
LPARENT (
STRCON "%d"
COMMA ,
IDENFR sum
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
RPARENT )
SEMICN ;
<Stmt>
RETURNTK return
INTCON 0
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ;
<Stmt>
RBRACE }
<Block>
<MainFuncDef>
<CompUnit>
